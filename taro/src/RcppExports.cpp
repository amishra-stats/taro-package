// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// nzcount
int nzcount(arma::vec x);
RcppExport SEXP _taro_nzcount(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(nzcount(x));
    return rcpp_result_gen;
END_RCPP
}
// wpow
arma::vec wpow(arma::vec x, double gamma0);
RcppExport SEXP _taro_wpow(SEXP xSEXP, SEXP gamma0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type gamma0(gamma0SEXP);
    rcpp_result_gen = Rcpp::wrap(wpow(x, gamma0));
    return rcpp_result_gen;
END_RCPP
}
// sym_inv
arma::mat sym_inv(arma::mat x);
RcppExport SEXP _taro_sym_inv(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(sym_inv(x));
    return rcpp_result_gen;
END_RCPP
}
// softThres
double softThres(double x, double lambda);
RcppExport SEXP _taro_softThres(SEXP xSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(softThres(x, lambda));
    return rcpp_result_gen;
END_RCPP
}
// scadThres
double scadThres(double z, double lambda, double k);
RcppExport SEXP _taro_scadThres(SEXP zSEXP, SEXP lambdaSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type z(zSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(scadThres(z, lambda, k));
    return rcpp_result_gen;
END_RCPP
}
// mySdiff
arma::uvec mySdiff(arma::uvec x, arma::uvec y);
RcppExport SEXP _taro_mySdiff(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::uvec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(mySdiff(x, y));
    return rcpp_result_gen;
END_RCPP
}
// bregpcdenet_Rcpp
arma::vec bregpcdenet_Rcpp(arma::vec XY, arma::mat XX, arma::mat A, arma::vec B, arma::vec Lambda1, arma::vec Lambda2, double Mu, double Nu, arma::vec Beta0, int method, List control);
RcppExport SEXP _taro_bregpcdenet_Rcpp(SEXP XYSEXP, SEXP XXSEXP, SEXP ASEXP, SEXP BSEXP, SEXP Lambda1SEXP, SEXP Lambda2SEXP, SEXP MuSEXP, SEXP NuSEXP, SEXP Beta0SEXP, SEXP methodSEXP, SEXP controlSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type XY(XYSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type XX(XXSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::vec >::type B(BSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Lambda1(Lambda1SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Lambda2(Lambda2SEXP);
    Rcpp::traits::input_parameter< double >::type Mu(MuSEXP);
    Rcpp::traits::input_parameter< double >::type Nu(NuSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Beta0(Beta0SEXP);
    Rcpp::traits::input_parameter< int >::type method(methodSEXP);
    Rcpp::traits::input_parameter< List >::type control(controlSEXP);
    rcpp_result_gen = Rcpp::wrap(bregpcdenet_Rcpp(XY, XX, A, B, Lambda1, Lambda2, Mu, Nu, Beta0, method, control));
    return rcpp_result_gen;
END_RCPP
}
// bregpcdenetdiag_Rcpp
arma::vec bregpcdenetdiag_Rcpp(arma::vec XY, arma::vec XX, arma::mat A, arma::vec B, arma::vec Lambda1, arma::vec Lambda2, double Mu, double Nu, arma::vec Beta0, int method, List control);
RcppExport SEXP _taro_bregpcdenetdiag_Rcpp(SEXP XYSEXP, SEXP XXSEXP, SEXP ASEXP, SEXP BSEXP, SEXP Lambda1SEXP, SEXP Lambda2SEXP, SEXP MuSEXP, SEXP NuSEXP, SEXP Beta0SEXP, SEXP methodSEXP, SEXP controlSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type XY(XYSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type XX(XXSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::vec >::type B(BSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Lambda1(Lambda1SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Lambda2(Lambda2SEXP);
    Rcpp::traits::input_parameter< double >::type Mu(MuSEXP);
    Rcpp::traits::input_parameter< double >::type Nu(NuSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Beta0(Beta0SEXP);
    Rcpp::traits::input_parameter< int >::type method(methodSEXP);
    Rcpp::traits::input_parameter< List >::type control(controlSEXP);
    rcpp_result_gen = Rcpp::wrap(bregpcdenetdiag_Rcpp(XY, XX, A, B, Lambda1, Lambda2, Mu, Nu, Beta0, method, control));
    return rcpp_result_gen;
END_RCPP
}
// get_cube_prod
arma::cube get_cube_prod(arma::mat& b, arma::mat& c, arma::mat& naind);
RcppExport SEXP _taro_get_cube_prod(SEXP bSEXP, SEXP cSEXP, SEXP naindSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type b(bSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type c(cSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type naind(naindSEXP);
    rcpp_result_gen = Rcpp::wrap(get_cube_prod(b, c, naind));
    return rcpp_result_gen;
END_RCPP
}
// get_cube_prod_inv
arma::cube get_cube_prod_inv(arma::mat& b, arma::mat& c, arma::mat& naind);
RcppExport SEXP _taro_get_cube_prod_inv(SEXP bSEXP, SEXP cSEXP, SEXP naindSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type b(bSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type c(cSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type naind(naindSEXP);
    rcpp_result_gen = Rcpp::wrap(get_cube_prod_inv(b, c, naind));
    return rcpp_result_gen;
END_RCPP
}
// taro_cpp_ur
Rcpp::List taro_cpp_ur(arma::mat Y, arma::mat X0, arma::mat Ac, arma::vec Bc, int nlam, arma::vec cindex, Rcpp::List initw, double Dini, arma::mat Zini, arma::mat Uini, arma::mat Vini, arma::mat ortV, arma::vec Bv, Rcpp::List control, int misind, int pl_method, arma::mat naind, arma::mat lamMat);
RcppExport SEXP _taro_taro_cpp_ur(SEXP YSEXP, SEXP X0SEXP, SEXP AcSEXP, SEXP BcSEXP, SEXP nlamSEXP, SEXP cindexSEXP, SEXP initwSEXP, SEXP DiniSEXP, SEXP ZiniSEXP, SEXP UiniSEXP, SEXP ViniSEXP, SEXP ortVSEXP, SEXP BvSEXP, SEXP controlSEXP, SEXP misindSEXP, SEXP pl_methodSEXP, SEXP naindSEXP, SEXP lamMatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X0(X0SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Ac(AcSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Bc(BcSEXP);
    Rcpp::traits::input_parameter< int >::type nlam(nlamSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type cindex(cindexSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type initw(initwSEXP);
    Rcpp::traits::input_parameter< double >::type Dini(DiniSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Zini(ZiniSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Uini(UiniSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Vini(ViniSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type ortV(ortVSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Bv(BvSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type control(controlSEXP);
    Rcpp::traits::input_parameter< int >::type misind(misindSEXP);
    Rcpp::traits::input_parameter< int >::type pl_method(pl_methodSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type naind(naindSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type lamMat(lamMatSEXP);
    rcpp_result_gen = Rcpp::wrap(taro_cpp_ur(Y, X0, Ac, Bc, nlam, cindex, initw, Dini, Zini, Uini, Vini, ortV, Bv, control, misind, pl_method, naind, lamMat));
    return rcpp_result_gen;
END_RCPP
}
// tarorrr_cpp_ur
Rcpp::List tarorrr_cpp_ur(arma::mat Y, arma::mat X0, arma::vec cindex, arma::mat Ac, arma::vec Bc, arma::mat Zini, arma::mat Cini, Rcpp::List control);
RcppExport SEXP _taro_tarorrr_cpp_ur(SEXP YSEXP, SEXP X0SEXP, SEXP cindexSEXP, SEXP AcSEXP, SEXP BcSEXP, SEXP ZiniSEXP, SEXP CiniSEXP, SEXP controlSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X0(X0SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type cindex(cindexSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Ac(AcSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Bc(BcSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Zini(ZiniSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Cini(CiniSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type control(controlSEXP);
    rcpp_result_gen = Rcpp::wrap(tarorrr_cpp_ur(Y, X0, cindex, Ac, Bc, Zini, Cini, control));
    return rcpp_result_gen;
END_RCPP
}
// tarorrr_cpp_ur2
Rcpp::List tarorrr_cpp_ur2(arma::mat Y, arma::mat X0, arma::vec cindex, arma::mat Ac, arma::vec Bc, arma::mat Zini, arma::mat Cini, Rcpp::List control);
RcppExport SEXP _taro_tarorrr_cpp_ur2(SEXP YSEXP, SEXP X0SEXP, SEXP cindexSEXP, SEXP AcSEXP, SEXP BcSEXP, SEXP ZiniSEXP, SEXP CiniSEXP, SEXP controlSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X0(X0SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type cindex(cindexSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Ac(AcSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Bc(BcSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Zini(ZiniSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Cini(CiniSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type control(controlSEXP);
    rcpp_result_gen = Rcpp::wrap(tarorrr_cpp_ur2(Y, X0, cindex, Ac, Bc, Zini, Cini, control));
    return rcpp_result_gen;
END_RCPP
}
// tarorrr
Rcpp::List tarorrr(arma::mat Y, arma::mat X0, int rank, arma::vec cindex, arma::mat Ac, arma::vec Bc, arma::mat Zini, Rcpp::List control);
RcppExport SEXP _taro_tarorrr(SEXP YSEXP, SEXP X0SEXP, SEXP rankSEXP, SEXP cindexSEXP, SEXP AcSEXP, SEXP BcSEXP, SEXP ZiniSEXP, SEXP controlSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X0(X0SEXP);
    Rcpp::traits::input_parameter< int >::type rank(rankSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type cindex(cindexSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Ac(AcSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Bc(BcSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Zini(ZiniSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type control(controlSEXP);
    rcpp_result_gen = Rcpp::wrap(tarorrr(Y, X0, rank, cindex, Ac, Bc, Zini, control));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_taro_nzcount", (DL_FUNC) &_taro_nzcount, 1},
    {"_taro_wpow", (DL_FUNC) &_taro_wpow, 2},
    {"_taro_sym_inv", (DL_FUNC) &_taro_sym_inv, 1},
    {"_taro_softThres", (DL_FUNC) &_taro_softThres, 2},
    {"_taro_scadThres", (DL_FUNC) &_taro_scadThres, 3},
    {"_taro_mySdiff", (DL_FUNC) &_taro_mySdiff, 2},
    {"_taro_bregpcdenet_Rcpp", (DL_FUNC) &_taro_bregpcdenet_Rcpp, 11},
    {"_taro_bregpcdenetdiag_Rcpp", (DL_FUNC) &_taro_bregpcdenetdiag_Rcpp, 11},
    {"_taro_get_cube_prod", (DL_FUNC) &_taro_get_cube_prod, 3},
    {"_taro_get_cube_prod_inv", (DL_FUNC) &_taro_get_cube_prod_inv, 3},
    {"_taro_taro_cpp_ur", (DL_FUNC) &_taro_taro_cpp_ur, 18},
    {"_taro_tarorrr_cpp_ur", (DL_FUNC) &_taro_tarorrr_cpp_ur, 8},
    {"_taro_tarorrr_cpp_ur2", (DL_FUNC) &_taro_tarorrr_cpp_ur2, 8},
    {"_taro_tarorrr", (DL_FUNC) &_taro_tarorrr, 8},
    {NULL, NULL, 0}
};

RcppExport void R_init_taro(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
